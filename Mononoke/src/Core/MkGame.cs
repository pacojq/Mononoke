using System;
using System.IO;
using System.Reflection;
using System.Runtime;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using Mononoke.Input;

namespace Mononoke.Core
{
	public class MkGame : Game
    {
        
        
        #region // - - - - - Properties - - - - - //
        
        public static MkGame Instance { get; private set; }
        public static GraphicsDeviceManager Graphics { get; private set; }
        
        public static int Width { get; private set; }
        public static int Height { get; private set; }

        // time
        public static float DeltaTime { get; private set; }
        public static float RawDeltaTime { get; private set; }
        
        #endregion




        #region // - - - - - Fields - - - - - // 

        
        public string Title;       

        public Action OnStart = () => { };
        public Action OnUpdate = () => { };
        public Action OnEnd = () => { };

        
        public float TimeRate = 1f;
        public float FreezeTimer;
        public int FPS;
        private TimeSpan counterElapsed = TimeSpan.Zero;

        private Scene _scene;
        
        
        private GraphicsDeviceManager graphics;
        private SpriteBatch spriteBatch;
        

        #endregion
        
        


        public MkGame(int width, int height, int windowWidth, int windowHeight, string windowTitle, bool fullscreen)
        {
            Instance = this;

            Title = Window.Title = windowTitle;
            Width = width;
            Height = height;
            
            graphics = new GraphicsDeviceManager(this);
            Content.RootDirectory = "Content";
        }
        
        
        


        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            // TODO: Add your initialization logic here

            base.Initialize();
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            // Create a new SpriteBatch, which can be used to draw textures.
            spriteBatch = new SpriteBatch(GraphicsDevice);

            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
            // TODO: Unload any non ContentManager content here
        }

        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // TODO remove this MonoGame autogenerated statement
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            // Update delta time
            RawDeltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;
            DeltaTime = RawDeltaTime * TimeRate;

            
            //Update input
            MkInput.Update();
            

            // Update scene
            if (FreezeTimer > 0)
                FreezeTimer = Math.Max(FreezeTimer - RawDeltaTime, 0);
            else if (_scene != null)
            {
                _scene.BeforeUpdate();
                _scene.Update();
                _scene.AfterUpdate();
            }

            // User's custom on update method
            OnUpdate();
            
            // MonoGame update
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            GraphicsDevice.Clear(Color.CornflowerBlue);

            // TODO: Add your drawing code here

            base.Draw(gameTime);
        }
        
        
        
        
    }
}