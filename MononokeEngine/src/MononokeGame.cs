

using System;
using System.IO;
using System.Reflection;
using Microsoft.Xna.Framework;
using Microsoft.Xna.Framework.Graphics;
using Microsoft.Xna.Framework.Input;
using MononokeEngine.ECS;
using MononokeEngine.Graphics;
using MononokeEngine.Input;
using MononokeEngine.Physics;
using MononokeEngine.Scenes;

namespace MononokeEngine
{
	public class MononokeGame : Game
    {
        
        
        
        public static MononokeGame Instance { get; private set; }

        public static int Width => Mononoke.Graphics.Width;
        public static int Height => Mononoke.Graphics.Height;

        // time
        public static float DeltaTime { get; private set; }
        public static float RawDeltaTime { get; private set; }
        
        
        
        public string Title { get; set; }

        public Action OnStart = () => { };
        public Action OnUpdate = () => { };
        public Action OnEnd = () => { };


        public float TimeRate => _timeRate;
        private float _timeRate = 1f;
        
        public float FreezeTimer  { get; set; }
        
        
        public int FPS { get; private set; }
        private int _fpsCounter = 0;
        private TimeSpan counterElapsed = TimeSpan.Zero;
        
        
        

        // TODO
        // add a constructor that receives a filename, which contains the
        // settings to launch the game ?
        
        public MononokeGame(int width, int height, int windowWidth, int windowHeight, string windowTitle, bool fullscreen)
        {
            Instance = this;

            Title = Window.Title = windowTitle;
            
            Mononoke.Graphics.Initialize(width, height, windowWidth, windowHeight, fullscreen);

            Content.RootDirectory = @"Content";
        }
        
        
        


        /// <summary>
        /// Allows the game to perform any initialization it needs to before starting to run.
        /// This is where it can query for any required services and load any non-graphic
        /// related content.  Calling base.Initialize will enumerate through any components
        /// and initialize them as well.
        /// </summary>
        protected override void Initialize()
        {
            base.Initialize();
            
            Mononoke.Scenes.Initialize();
            Mononoke.Ecs.Initialize();
            Mononoke.Input.Initialize();
            
            Mononoke.Logger.Print("Logger hello world");
        }

        /// <summary>
        /// LoadContent will be called once per game and is the place to load
        /// all of your content.
        /// </summary>
        protected override void LoadContent()
        {
            base.LoadContent();
            
            // Create a new SpriteBatch, which can be used to draw textures.
            //spriteBatch = new SpriteBatch(GraphicsDevice);

            Mononoke.Logger.Print("Content: " + this.Content.RootDirectory);

            // TODO load all content with this.Content.Load<>("");

            Mononoke.Graphics.GraphicsDevice = this.GraphicsDevice;
            Mononoke.Graphics.LoadContent();
            
            
            // TODO: use this.Content to load your game content here
        }

        /// <summary>
        /// UnloadContent will be called once per game and is the place to unload
        /// game-specific content.
        /// </summary>
        protected override void UnloadContent()
        {
            OnEnd();
            
            // TODO: Unload any non ContentManager content here
        }

        
        
        /// <summary>
        /// Allows the game to run logic such as updating the world,
        /// checking for collisions, gathering input, and playing audio.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Update(GameTime gameTime)
        {
            // TODO remove this MonoGame autogenerated statement
            if (GamePad.GetState(PlayerIndex.One).Buttons.Back == ButtonState.Pressed || Keyboard.GetState().IsKeyDown(Keys.Escape))
                Exit();

            // Update delta time
            RawDeltaTime = (float)gameTime.ElapsedGameTime.TotalSeconds;
            DeltaTime = RawDeltaTime * TimeRate;

            
            //Update input
            Mononoke.Input.Update();

            Scene scene = Mononoke.Scenes.Current;

            // Update scene
            if (FreezeTimer > 0)
                FreezeTimer = Math.Max(FreezeTimer - RawDeltaTime, 0);
            else if (scene != null)
            {
                scene.BeforeUpdate();
                scene.Update();
                scene.AfterUpdate();
            }

            // User's custom on update method
            OnUpdate();
            
            // MonoGame update
            base.Update(gameTime);
        }

        /// <summary>
        /// This is called when the game should draw itself.
        /// </summary>
        /// <param name="gameTime">Provides a snapshot of timing values.</param>
        protected override void Draw(GameTime gameTime)
        {
            Mononoke.Graphics.Render();
            base.Draw(gameTime);
            
            // Now we actually render
            Mononoke.Graphics.RenderImpl();
            
            
            //Frame counter
            _fpsCounter++;
            counterElapsed += gameTime.ElapsedGameTime;
            if (counterElapsed >= TimeSpan.FromSeconds(1))
            {
#if DEBUG
                Window.Title = $"{Title} [{_fpsCounter} fps -  {(GC.GetTotalMemory(false) / 1048576f):F} MB]";
#endif
                FPS = _fpsCounter;
                _fpsCounter = 0;
                counterElapsed -= TimeSpan.FromSeconds(1);
            }
            
        }

        

        
        
        
    }
}